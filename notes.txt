******************************************************************************************************
/* REACT-FINAL-FORM

1) React final form has few default methods..
<Form> // In form field we have a below methods..
    onSubmit :- onsubmit handle the submit 
    handleSubmit:- In onsubmit methods we have a handleSubmit method which is handle the form submit..
    validation:-  Also we need to define validation method...which is validate the function. 
</Form>

<Field>
      {...input}:- we can say input as props||property...its takes the values of text area..changes of text area...
      meta:- we have meta here for validation..its check whether user touch to filed or not..
             if there is an error then it will print the error msg
<Field>

<Field name="firstname" validate={required}

******* To this area code we called React-render-props.This approch called childern  ******** 
<Field>
              {({ input, meta }) => (
                <div>
                  <label>Name</label>
                  <input {...input} type="text" placeholder="First Name" />
                  {meta.error && meta.touched && <span>{meta.error}</span>}
                </div>
              )}
</Field>
*/

***********************************************  STORE **************************************************************

* A store is a JavaScript object.

* You must never directly modify or change the state that is kept inside the Redux store.

* Instead, the only way to cause an update to the state is to create a plain action object that describes 
"something that happened in the application", and then dispatch the action to the store to tell it what happened.

* When an action is dispatched, the store runs the root reducer function, and lets it calculate the new state based 
on the old state and the action.

******************************************** SUBSCRIBERS ******************************************************
* Finally, the store notifies subscribers that the state has been updated so the UI can be updated with the new data.


***************************** POST  DATA *********************************

So the flow for posting the form data to the server using redux-thunk goes like so

When submit button is clicked and action gets dispatched let us suppose SAVE_USER_TO_SERVER and an object with 
all the user details (name, email etc) is passed to for eg postUserThunkCreator() (which is a thunk function like 
in examples above).

Then thunk makes a post request to the server and sends the data along with it.
 And on the server side it gets saved into the database and response is returned

Now myAjaxLib.post("/someEndpoint", {data : someValue}).then() in .then() function you can 
check for the response if successfull the dispatch another action for eg SAVE_USER_TO_SERVER_SUCCESS 
otherwise SAVE_USER_TO_SERVER_FALIURE;

*So as we can see that three actions are bieng dipatched in this work flow namely : SAVE_USER_TO_SERVER

SAVE_USER_TO_SERVER_SUCCESS

SAVE_USER_TO_SERVER_FALIURE

So I hope its clear to you that you to create three action mentioned above.


*************************************** CREATE STORE ********************************************* 

You are passing in two reducers to the createStore function instead of one.

* Since the third argument to createStore is always the enhancer function it thinks that the 'initiaeState'
* variable is an enhancer function since you are passing this in as the thid argument to createStore.

************************************* REDUCER *******************************************************
* Remember the root reducer in your app should combine all your reducers into one single reducer.

* First and foremost, it's important to understand that your entire application really 
* only has one single reducer function

***************************** POST  DATA *********************************

So the flow for posting the form data to the server using redux-thunk goes like so

When submit button is clicked and action gets dispatched let us suppose SAVE_USER_TO_SERVER and an object with 
all the user details (name, email etc) is passed to for eg postUserThunkCreator() (which is a thunk function like 
in examples above).

Then thunk makes a post request to the server and sends the data along with it.
 And on the server side it gets saved into the database and response is returned

Now myAjaxLib.post("/someEndpoint", {data : someValue}).then() in .then() function you can 
check for the response if successfull the dispatch another action for eg SAVE_USER_TO_SERVER_SUCCESS 
otherwise SAVE_USER_TO_SERVER_FALIURE;

*So as we can see that three actions are bieng dipatched in this work flow namely : SAVE_USER_TO_SERVER

SAVE_USER_TO_SERVER_SUCCESS

SAVE_USER_TO_SERVER_FALIURE

So I hope its clear to you that you to create three action mentioned above.


***************************************************************************************** 